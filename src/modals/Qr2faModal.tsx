import React, { useState, useEffect } from "react";
import { Modal, Steps, Button, Input, QRCode, message } from "antd";
import {
  SafetyOutlined,
  MobileOutlined,
  CheckCircleOutlined,
} from "@ant-design/icons";
import handleAPI from "@/apis/handleAPI";
import { API_NAME } from "@/apis/apiName";
import { useDispatch, useSelector } from "react-redux";
import { addAuth, authSelector } from "@/store/reducers/auth-reducer";
import { TwoFactorInput } from "@/components";

interface Qr2faModalProps {
  open: boolean;
  onClose: () => void;
  onSuccess?: (enabled: boolean) => void; 
}

const Qr2faModal: React.FC<Qr2faModalProps> = ({
  open,
  onClose,
  onSuccess,
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [qrCodeData, setQrCodeData] = useState("");
  const [verificationCode, setVerificationCode] = useState("");
  const [loading, setLoading] = useState(false);

  const auth = useSelector(authSelector);
  const dispatch = useDispatch();

  const steps = [
    {
      title: "Qu√©t m√£ QR",
      icon: <SafetyOutlined />,
    },
    {
      title: "Nh·∫≠p m√£ x√°c th·ª±c",
      icon: <MobileOutlined />,
    },
    {
      title: "Ho√†n th√†nh",
      icon: <CheckCircleOutlined />,
    },
  ];

  useEffect(() => {
    if (open && !auth?.isTwoFactorEnabled) {
      generateQRCode();
    }
  }, [open]);

  const generateQRCode = async () => {
    setLoading(true);
    try {
      const response = await handleAPI(
        API_NAME.auth.generateSecret,
        {},
        "post"
      );
      if (response?.uri) {
        setQrCodeData(response.uri);
        message.success("ƒê√£ t·∫°o m√£ QR th√†nh c√¥ng!");
      } else if (response?.qrCodeUrl) {
        setQrCodeData(response.qrCodeUrl);
        message.success("ƒê√£ t·∫°o m√£ QR th√†nh c√¥ng!");
      } else {
        message.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu QR t·ª´ server!");
      }
    } catch (error: any) {
      message.error("Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i!");
      console.error("Generate QR error:", error);
    } finally {
      setLoading(false);
    }
  };

  const enable2FA = async () => {
    if (!verificationCode || verificationCode.length !== 6) {
      message.error("Vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c 6 s·ªë!");
      return;
    }

    setLoading(true);
    try {
      const response = await handleAPI(
        API_NAME.auth.verify2fa,
        { token: verificationCode },
        "post"
      );

      if (response?.success) {
        setCurrentStep(2);

        const updatedAuth = {
          ...auth,
          isTwoFactorEnabled: true,
        };
        dispatch(addAuth(updatedAuth));
        localStorage.setItem("userInfo", JSON.stringify(updatedAuth));
        sessionStorage.setItem("userInfo", JSON.stringify(updatedAuth));

        message.success("ƒê√£ b·∫≠t b·∫£o m·∫≠t hai l·ªõp th√†nh c√¥ng!");

        onSuccess?.(true);

        setTimeout(() => {
          handleClose();
        }, 2000);
      } else {
        message.error("Kh√¥ng th·ªÉ k√≠ch ho·∫°t 2FA!");
      }
    } catch (error: any) {
      message.error(error.message || "M√£ x√°c th·ª±c kh√¥ng ch√≠nh x√°c!");
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setCurrentStep(0);
    setQrCodeData("");
    setVerificationCode("");
    onClose();
  };

  return (
    <>
      <Modal
        title="Thi·∫øt l·∫≠p b·∫£o m·∫≠t hai l·ªõp"
        open={open}
        onCancel={handleClose}
        width={550}
        footer={null}
        destroyOnClose
        centered
        maskClosable={false}
        zIndex={10000}
      >
        <Steps
          current={currentStep}
          items={steps}
          className="mb-4"
          size="small"
        />

        {currentStep === 0 && (
          <div className="text-center">
            <h6 className="mb-3">B∆∞·ªõc 1: Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng x√°c th·ª±c</h6>
            <p className="text-muted mb-4">
              S·ª≠ d·ª•ng <strong>Google Authenticator</strong>,{" "}
              <strong>Authy</strong> ho·∫∑c ·ª©ng d·ª•ng x√°c th·ª±c t∆∞∆°ng t·ª± ƒë·ªÉ qu√©t m√£
              QR b√™n d∆∞·ªõi:
            </p>

            {qrCodeData ? (
              <div className="d-flex justify-content-center mb-4">
                <div
                  style={{
                    padding: "20px",
                    backgroundColor: "#ffffff",
                    borderRadius: "12px",
                    border: "1px solid #e8e8e8",
                    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                  }}
                >
                  <QRCode
                    value={qrCodeData}
                    size={200}
                    level="M"
                    includeMargin={true}
                  />
                </div>
              </div>
            ) : (
              <div className="text-center py-5">
                <div className="spinner-border text-primary mb-3" role="status">
                  <span className="visually-hidden">ƒêang t·∫°o...</span>
                </div>
                <p className="text-muted">ƒêang t·∫°o m√£ QR...</p>
              </div>
            )}

            {qrCodeData && (
              <div className="alert alert-info mt-4 text-start">
                <small>
                  <strong>
                    <SafetyOutlined
                      style={{ color: "#1890ff", marginRight: 4 }}
                    />{" "}
                    L∆∞u √Ω:{" "}
                  </strong>
                  <span style={{ color: "red" }}>
                    N·∫øu b·∫°n ƒë√£ qu√©t m√£ QR tr∆∞·ªõc ƒë√≥, h√£y x√≥a t√†i kho·∫£n c≈© trong
                    ·ª©ng d·ª•ng x√°c th·ª±c tr∆∞·ªõc khi qu√©t l·∫°i.
                  </span>
                  <br />
                  <strong>
                    <MobileOutlined
                      style={{ color: "#1890ff", marginRight: 4 }}
                    />{" "}
                    H∆∞·ªõng d·∫´n:
                  </strong>
                  <br />
                  1. M·ªü ·ª©ng d·ª•ng Authenticator tr√™n ƒëi·ªán tho·∫°i
                  <br />
                  2. Ch·ªçn "+" ho·∫∑c "Th√™m t√†i kho·∫£n"
                  <br />
                  3. Qu√©t m√£ QR n√†y
                  <br />
                  4. T√†i kho·∫£n "QuizApp" s·∫Ω xu·∫•t hi·ªán v·ªõi m√£ 6 s·ªë
                </small>
              </div>
            )}

            <div className="mt-4 d-flex justify-content-between">
              <Button onClick={handleClose} size="large">
                H·ªßy
              </Button>
              <Button
                type="primary"
                size="large"
                onClick={() => setCurrentStep(1)}
                disabled={!qrCodeData}
                icon={<MobileOutlined />}
              >
                ƒê√£ qu√©t xong, ti·∫øp t·ª•c
              </Button>
            </div>
          </div>
        )}

        {currentStep === 1 && (
          <TwoFactorInput
            verificationCode={verificationCode}
            onVerificationCodeChange={setVerificationCode}
            onSubmit={enable2FA}
            onBack={() => setCurrentStep(0)}
            loading={loading}
            title="B∆∞·ªõc 2: Nh·∫≠p m√£ x√°c th·ª±c"
            showBackButton={true}
            submitButtonText="X√°c nh·∫≠n"
          />
        )}

        {currentStep === 2 && (
          <div className="text-center">
            <CheckCircleOutlined
              style={{ fontSize: "60px", color: "#52c41a" }}
              className="mb-4"
            />
            <h5 className="text-success mb-3">üéâ Thi·∫øt l·∫≠p th√†nh c√¥ng!</h5>

            <div className="alert alert-success mb-4">
              <p className="mb-2">
                <strong>B·∫£o m·∫≠t hai l·ªõp ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!</strong>
              </p>
              <small className="text-muted">
                T·ª´ gi·ªù, b·∫°n s·∫Ω c·∫ßn nh·∫≠p m√£ x√°c th·ª±c khi ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫£m b·∫£o an
                to√†n t√†i kho·∫£n.
              </small>
            </div>

            <div className="alert alert-warning">
              <small>
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                <br />
                ‚Ä¢ Gi·ªØ ƒëi·ªán tho·∫°i c√≥ ·ª©ng d·ª•ng Authenticator an to√†n
                <br />
                ‚Ä¢ Sao l∆∞u m√£ kh√¥i ph·ª•c n·∫øu c√≥
                <br />‚Ä¢ Li√™n h·ªá admin n·∫øu m·∫•t quy·ªÅn truy c·∫≠p
              </small>
            </div>

            <Button
              type="primary"
              size="large"
              onClick={handleClose}
              icon={<CheckCircleOutlined />}
            >
              Ho√†n th√†nh
            </Button>
          </div>
        )}
      </Modal>
    </>
  );
};

export default Qr2faModal;
